import java.nio.file.Files

// Aggregate Javadocs
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.+'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2" apply false
    id "java"
    id 'java-library'
    id "jacoco"
    id "checkstyle"
    id "org.sonarqube" version "3.4.0.2513"
    id 'fabric-loom' version '0.12.+' apply false
}

apply plugin: 'nebula-aggregate-javadocs'

def determineBuildVersion = {
    def buildInfo = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--count', 'HEAD'
        standardOutput = buildInfo
    }
    // Magic number: git rev-list --count cdb13e3b663b18e3938ad5efc60d165fa9301f6e
    return Integer.parseInt(buildInfo.toString().replaceAll("[^0-9]", "")) - 3529
}
def buildVersion = determineBuildVersion()

allprojects {

    group "com.djrapitops"
    version "5.5-SNAPSHOT"

    ext.majorVersion = '5'
    ext.minorVersion = '5'
    ext.buildVersion = buildVersion
    ext.fullVersion = project.ext.majorVersion + '.' + project.ext.minorVersion + ' build ' + project.ext.buildVersion

    // Fix for UTF-8 files showing with wrong encoding when compiled on Windows machines.
    compileJava { options.encoding = "UTF-8" }
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    javadoc { options.encoding = 'UTF-8' }
}

logger.lifecycle("Building artifact for version $fullVersion")

subprojects {
    // Build plugins
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"

    // Report plugins
    apply plugin: "checkstyle"
    apply plugin: "jacoco"

    compileJava {
        options.release = 11
    }

    ext {
        daggerVersion = "2.42"

        palVersion = "5.1.0"

        bukkitVersion = "1.13.2-R0.1-SNAPSHOT"
        spigotVersion = "1.13.2-R0.1-SNAPSHOT"
        paperVersion = "1.13.2-R0.1-SNAPSHOT"
        spongeVersion = "9.0.0"
        nukkitVersion = "1.0-SNAPSHOT"
        bungeeVersion = "1.16-R0.4"
        velocityVersion = "3.0.0-SNAPSHOT"
        redisBungeeVersion = "0.3.8-SNAPSHOT"

        commonsTextVersion = "1.9"
        commonsCompressVersion = "1.21"
        commonsCodecVersion = "1.15"
        caffeineVersion = "3.1.1"
        mysqlVersion = "8.0.29"
        jettyVersion = "11.0.11"
        caffeineVersion = "2.9.2"
        mysqlVersion = "8.0.26"
        sqliteVersion = "3.36.0.3"
        hikariVersion = "5.0.1"
        slf4jVersion = "1.7.36"
        geoIpVersion = "3.0.1"
        gsonVersion = "2.9.0"
        dependencyDownloadVersion = "1.2.1"

        bstatsVersion = "3.0.0"
        placeholderapiVersion = "2.11.2"
        nkPlaceholderapiVersion = "1.4-SNAPSHOT"

        junitVersion = "5.8.2"
        mockitoVersion = "4.6.1"
        testContainersVersion = "1.17.3"
        swaggerVersion = "2.2.1"
    }

    repositories {
        mavenCentral()
        google()
        maven { url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" } // Spigot
        maven { url = "https://papermc.io/repo/repository/maven-public/" } // Paper
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" } // Sponge
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots" } // BungeeCord
        maven { url = "https://repo.md-5.net/content/repositories/snapshots/" } // RedisBungee
        maven { url = "https://repo.velocitypowered.com/snapshots/" } // Velocity
        maven { url = "https://repo.playeranalytics.net/releases" } // Plan
    }

    dependencies {
        // Dependency Injection used across the project
        shadow "com.google.dagger:dagger:$daggerVersion"
        annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
        testImplementation "com.google.dagger:dagger:$daggerVersion"
        testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

        // Test Tooling Dependencies
        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"      // JUnit 5
        testImplementation "org.mockito:mockito-core:$mockitoVersion"           // Mockito Core
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"  // Mockito JUnit 5 Extension
        testImplementation "com.jayway.awaitility:awaitility:1.7.0"
        // Awaitility (Concurrent wait conditions)

        // Testing dependencies required by Plan
        testImplementation "org.xerial:sqlite-jdbc:$sqliteVersion"    // SQLite
        testImplementation "mysql:mysql-connector-java:$mysqlVersion" // MySQL
    }

    configurations {
        // Include shadowed dependencies in compile classpath of dependent modules
        api.extendsFrom shadow

        testArtifacts.extendsFrom testRuntimeOnly // Test classes available to other modules
        testImplementation.extendsFrom shadow // Include shadowed dependencies in test classpath
    }
    // Test classes available to other modules
    task testJar(type: Jar) {
        archiveClassifier.set("test")
        from sourceSets.test.output
    }
    artifacts {
        testArtifacts testJar
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "failed", "skipped"
            exceptionFormat "full"
        }
    }

    checkstyle {
        toolVersion "8.44"
        getConfigDirectory().set file("$rootProject.projectDir/config/checkstyle")
    }

    jacocoTestReport {
        reports {
            xml.required = true
            // xml.destination file("${buildDir}/jacoco/report.xml")
        }
    }

    plugins.withType(JacocoPlugin) {
        tasks["test"].finalizedBy 'jacocoTestReport'
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Player Analytics"
        property "sonar.projectKey", "com.djrapitops:Plan"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

abstract class PrintSnapshotVersionTask extends DefaultTask {
    @TaskAction
    def print() {
        def versionsDir = project.file("$project.buildDir/versions")
        def textFile = project.file("$project.buildDir/versions/snapshot.txt")
        versionsDir.mkdirs()
        Files.deleteIfExists(textFile.toPath())
        textFile.createNewFile()
        textFile << "$project.version"
    }
}

abstract class PrintJarNameVersionTask extends DefaultTask {
    @TaskAction
    def print() {
        def versionsDir = project.file("$project.buildDir/versions")
        def textFile = project.file("$project.buildDir/versions/jar.txt")
        versionsDir.mkdirs()
        Files.deleteIfExists(textFile.toPath())
        textFile.createNewFile()
        textFile << "$project.majorVersion.$project.minorVersion-build-$project.buildVersion"
    }
}

abstract class PrintHumanReadableVersionTask extends DefaultTask {
    @TaskAction
    def print() {
        def versionsDir = project.file("$project.buildDir/versions")
        def textFile = project.file("$project.buildDir/versions/human.txt")
        versionsDir.mkdirs()
        Files.deleteIfExists(textFile.toPath())
        textFile.createNewFile()
        textFile << "$project.fullVersion"
    }
}

// Create a task using the task type
tasks.register('snapshotVersion', PrintSnapshotVersionTask)
tasks.register('jarNameVersion', PrintJarNameVersionTask)
tasks.register('humanReadableVersion', PrintHumanReadableVersionTask)
